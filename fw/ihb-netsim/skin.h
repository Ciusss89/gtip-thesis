#ifndef CAN_NETSIM_H
#define CAN_NETSIM_H

#include <stdlib.h>
#include <stdio.h>

#define MAX_SK_NODES (256u)
#define MAX_SK_TACTAILS (16u)

#define SK_THREAD_HELP	"ihb-skin driver"
#define SK_USERSPACE_HELP "ihb-netsim userspace tool"

/* SK_N_S: Skin nodes for IHB */
#ifndef SK_N_S
#define SK_N_S (8u)
#endif

/* SK_T_S: Skin Tactile sensors per skin node */
#ifndef SK_T_S
#define SK_T_S (12u)
#endif

/**
 * struct skin_node - represent the collected data which are incoming by skin
 *                    nodes. The struct skin_node is filled by ihb-netsim driver
 *
 * @data: payload, the output of the tactile sensors
 * @address: node's address
 * @expired: Each time that the IHB acquires payload from SKIN node, that means
 *           that the node is still alive so expired is not set.
 *           Netsim set is always false.
 *
 * Struct size dipends by SK_T_S, if SK_T_S == 12, struct is 16bytes.
 */
struct skin_node {
	uint8_t data[SK_T_S];
	uint16_t address;
	bool expired;
};

/*
 * @ihb_skin_module_info: print skin_node struct contens
 *
 * @ctx: pointer of struct skin_node
 */
void ihb_skin_module_info(struct skin_node *ctx);

/*
 * @skin_node_handler: handler of skin user-space tools
 *
 * > skin fail <node> - set as expired the node
 *
 * It requires the Riot-os shell.
 */
int skin_node_handler(int argc, char **argv);

/*
 * @skin_node_sim_thread: This thread simulate a network of Skin modules large
 *                        SK_N_S. Each module contains SK_T_S tactiles sensors.
 *                        The payload is generated by random function.
 *                        it adds the skin_node struct pointer to ihb_structs.
 *
 * @in: pointer of struct ihb_structs
 */
void *skin_node_sim_thread(void *in);
#endif
